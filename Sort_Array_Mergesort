// 1-Declare left and right variable  which will mark the extreme indices of the array.
// 2-Left will be assigned to 0 and right will be assigned to length of array-1.
// 3-Find mid = (left+right)/2.
// 4-Call mergeSort on  both halves i.e array(left,mid) and array(mid+1,rear).
// 5-Above will continue till left<right.
// 6-Then we will call merge on the 2 subproblems which merges the the sorted subproblems.





import java.util.*;
class MergeSort
{
    public static void main(String [] args)
    {

            int arr[] = { 12, 15,9,5,4,1,88};
           sort(arr, 0, arr.length - 1); //funciton to sort the array 
           System.out.println("Sorted array");
            for(int i=0;i<arr.length;i++){
            System.out.println(arr[i]);
            }
    }
    
    
    private static  void sort(int arr[], int l, int r)
    {
        if (l < r) {
            // mid point
            int m =l+ (r-l)/2;
 
            // this sorts the  first and second halves o f array
            sort(arr, l, m);
            sort(arr, m + 1, r);
 
            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }
    
    private static void merge(int Arr[], int start, int mid, int end) 
    {

          // create a temp array
          int temp[] = new int[end - start + 1];

          // movers for both intervals and for temp array 
          int i = start, j = mid+1, k = 0;

          // traverse both arrays and in each iteration and add smaller of both elements in temp 
          while(i <= mid && j <= end) {
            if(Arr[i] <= Arr[j]) {
              temp[k] = Arr[i];
              k += 1; 
              i += 1;
            }
            else {
              temp[k] = Arr[j];
              k += 1; 
              j += 1;
            }
          }

          // add elements left in the first interval 
          while(i <= mid) {
            temp[k] = Arr[i];
            k += 1; i += 1;
          }

          // add elements left in the second interval 
          while(j <= end) {
            temp[k] = Arr[j];
            k += 1; j += 1;
          }

          // copy temp to original interval
          for(i = start; i <= end; i += 1) {
            Arr[i] = temp[i - start]
	         }
  }
}


// Merge Sort is a recursive algorithm and time complexity is O(nlogn).
//Auxiliary Space: O(n)
//Algorithmic works on Divide and Conquer
//Stable: Yes
